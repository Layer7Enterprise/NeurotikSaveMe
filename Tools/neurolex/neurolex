#! /usr/bin/env ruby

require 'socket'

#10010 => wordA wordC
def vectorToWords vector
  words = []

  vector.split("").each_with_index do |x, i|
    if vector[i] == "1"
      words << @lexicon[i]
    end
  end

  words = words.join(" ")
  return words
end

#wordA wordC => "10010"
def words_to_vector words, inverted_lexicon
  vector = "0"*inverted_lexicon.keys.count

  words.split(" ").each_with_index do |x, i|
    vector[inverted_lexicon[x]] = "1"
  end

  vector
end

file = ARGV[0]
type = ARGV[1]
portFrom = ARGV[2]
portTo = ARGV[3]

def help
  puts "NeuroLex - Lexicon Swiss Knife"
  puts "[gen]erate a lexicon list from a set of words"
    puts "\tgen wordA wordB wordC wordD"
    puts "\t(hint) use > operator to save to a lexicon file"
  puts "Convert a word to vector [w2v]"
    puts "\tw2v word (Accepts STDIN lexicon)"
  exit
end

#Generate lexicon compatible 'stream' from a list of words
def gen
  words = ARGV[1..-1]
  inverted_lexicon= {}

  words.each_with_index do |word, index|
    inverted_lexicon[word] = index
  end

  words.each do |word|
    vector = words_to_vector word, inverted_lexicon
    puts "#{word} #{vector}"
  end
end

def w2v
  #word = ARGV[1]

  require 'pry'; binding.pry
  #ARGF.each do |line|
    #binding.pry
    #word, lexicon = line.split(" ")
    #puts vector
  #end
end

if ARGV[0] == "help"
  help
elsif ARGV[0] == "gen"
  gen
elsif ARGV[0] == "w2v"
  w2v
else
  help
end

exit

@vectorSize = 0
@lexicon = {}
#Read lexicon file
File.open(file, "r") do |file|
  #First line should be a length
  @vectorSize = file.readline.to_i
  puts "Vector Size: #{@vectorSize}"

  while !file.eof
    line = file.readline
    line_split = line.split(" ")
    index = line_split[0]
    word = line_split[1]
    puts "#{index} => #{word}"
    @lexicon[index.to_i] = word
  end
end
@invertedLexicon = @lexicon.invert


#Vector means you put in 1010 => "WordA Wordb"
#Words means "WordA WordB" => 1010
if type == "vector"
  puts "Started vector[1110->abc] mode 0.0.0.0:#{portFrom} => 0.0.0.0:#{portTo}"
  socket = UDPSocket.new
  socket.bind "0.0.0.0", portFrom.to_i
  loop do
    msg, info = socket.recvfrom 1024
    words = vectorToWords msg
    socket.send words, 0, "0.0.0.0", portTo
  end
#Input
elsif type == "words"
  puts "Started words[abc->1110] mode 0.0.0.0:#{portFrom} => 0.0.0.0:#{portTo}"
  socket = UDPSocket.new
  socket.bind "0.0.0.0", portFrom.to_i
  loop do
    msg, info = socket.recvfrom 1024
    vector = wordsToVector msg
    socket.send vector, 0, "0.0.0.0", portTo
  end
end
