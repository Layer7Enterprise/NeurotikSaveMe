#! /usr/bin/env ruby

require 'socket'

if ARGV.count < 1
  puts "[mode(basic) ....] - Based on a simple pairing"
  puts "[mode(timed) ....] - Based on the more complex timing"
  exit
end

mode = ARGV[0] 

if mode == "basic"
  if ARGV.count != 4
    #DelayBetweenExample = How to long to wait between each example
    puts "basic [port trainingFile delayBetweenExamples]"
    exit
  end

  port = ARGV[1].to_i
  trainingFile = ARGV[2]
  delayBetweenExamples = ARGV[3].to_i

  puts "Loading nbtrain basic file #{trainingFile}, the delay between examples at #{delayBetweenExamples}ms, and sending this data to 0.0.0.0:#{port}"
  examples = {}
  File.open(trainingFile, "r") do |file|
    while !file.eof
      example = file.readline.split(" ")
      examples[example[0]] = example[1]
      puts "#{example[0]} => #{example[1]}"
    end
  end

  loop do
    randomKey = examples.keys.sample
    randomValue = examples[randomKey]
    puts "Testing #{randomKey} => #{randomValue}"

    s = UDPSocket.new
    s.send(randomKey + randomValue, 0, "0.0.0.0", port)

    sleep delayBetweenExamples / 1000.0
  end
elsif mode == "timed"
  if ARGV.count != 5
    #DelayBetweenExample = How to long to wait between each example
    #DelayBetweenWords = How long to wait to produce the next 'word'
    puts "timed [port trainingFile delayBetweenWords delayBetweenExamples]"
    exit
  end

  port = ARGV[1].to_i
  trainingFile = ARGV[2]
  delayBetweenWords = ARGV[3].to_i
  delayBetweenExamples = ARGV[4].to_i

  puts "Loading nbtrain timed file #{trainingFile}, the delay between examples at #{delayBetweenExamples}ms, the delay between words is #{delayBetweenWords} and sending this data to 0.0.0.0:#{port}"
  examples = []
  File.open(trainingFile, "r") do |file|
    example = []
    while !file.eof
      line = file.readline.strip
      if line == "---"
        examples << example
        example = []
        next
      end

      split_apart = line.split(" ")
      example << {:input => split_apart[0], :output => split_apart[1]}
    end
  end

  s = UDPSocket.new
  loop do
    randomExample = examples.sample
    puts "Testing #{randomExample}"

    randomExample.each do |word|
      s.send(word[:input] + word[:output], 0, "0.0.0.0", port)
      sleep delayBetweenWords / 1000.0
    end

    sleep delayBetweenExamples / 1000.0
  end

else
  puts "Not a mode"
  exit
end
