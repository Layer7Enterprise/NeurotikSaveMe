#! /usr/bin/env ruby

require '/usr/bin/frame.rb'
require '/usr/bin/neuron_generation.rb'
require '/usr/bin/connect.rb'

@to_compile = [
]

#Add raw text
def add_compile_string priority, string
  @to_compile << {:priority => priority, :type => :string, :string => string}
end

#Add code
def add_compile_block priority, proc
  @to_compile << {:priority => priority, :type => :code, :proc => proc}
end

def compile
  #Sort
  @to_compile = @to_compile.sort {|x, y| x[:priority] <=> y[:priority]}
  @to_compile.each do |x|
    if x[:type] == :code
      x[:proc].call
    end
  end

  @to_compile.uniq!
end

def input
  begin_frame 0 do 
    write "NetworkIn"
      yield
    write "EndNetworkIn"
  end
end

def output
  begin_frame 0 do
    write "NetworkOut"
      yield
    write "EndNetworkOut"
  end
end

def main
  begin_frame 0 do
    yield
  end
end

unless ARGV[0].nil?
  load ARGV[0]
else
  load 'main.rb'
end

#puts @to_compile
compile

File.open "schema.txt", "w" do |file|
  file.write "Name: Prodigy\n"
  file.write "NumberOfNeurons: #{Neuron.count}\n"
  file.write "NumberOfDendrites: #{Connection.count_max_dendrites}\n"
  file.write "BasePort: 3000\n"
end

File.open "net.txt", "w" do |file|
  for x in @to_compile
    if x[:type] == :string
      file.write x[:string]
    end
  end
end
